%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%lace(N) prints the Hungarian lace pattern of dimension N.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

lace(N):-
	I is N,
	series(N,X),
	J is X,
	row(I,J,X,N,[]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%row(I,J,N,N0,X), I represents the the dimension of the
%%square being drawn, J the row currently being drawn, N
%%the ultimate dimension of the Hungarian lace which is
%%computed by series/2, N0 the actual input, and X, the
%%list of all positions in a row through which a square
%%passes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Terminating rules for row/5.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

row(0,0,N,_,X):-
	I1 is 2*N+1,
	print(I1,X).
row(0,J,N,N0,X):-
	I1 is 2*N+1,
	print(I1,X),
	J1 is J-1,
	I2 is N0,
	row(I2,J1,N,N0,[]),
	print(I1,X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%row/5 rules for handling the base case of I=1.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

row(1,J,N,N0,X):-
	J>1,
	I1 is 0,
	row(I1,J,N,N0,X).
row(1,J,N,N0,X):-
	J is 1,
	I1 is N+2,
	I2 is N+1,
	I3 is N,
	append(X,[I1],X1),
	append(X1,[I2],X2),
	append(X2,[I3],X3),
	I4 is 0,
	row(I4,J,N,N0,X3).
row(1,J,N,N0,X):-
	J<1,
	I1 is N+2,
	I2 is N,
	append(X,[I1],X1),
	append(X1,[I2],X2),
	I3 is 0,
	row(I3,J,N,N0,X2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%row/5 rules for handling general values of I and J.
%%series/2 computes the dimension of the square
%%corresponding to I.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

row(I,J,N,N0,X):-
	I>1,
	series(I,Y),
	Y<J,
	I1 is I-1,
	row(I1,J,N,N0,X).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%row/5 rules for handling odd I>1. Squares corresponding
%%to odd Is are drawn parallel to the X and Y axes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

row(I,J,N,N0,X):-
	I>1,
	I1 is mod(I,2),
	I1 is 1,
	series(I,Y),
	Y is J,
	setall(Y,I,J,N,N0,X).
row(I,J,N,N0,X):-
	I>1,
	I1 is mod(I,2),
	I1 is 1,
	series(I,Y),
	Y>J,
	I2 is N+1-Y,
	append(X,[I2],X1),
	I3 is N+1+Y,
	append(X1,[I3],X2),
	I4 is I-1,
	row(I4,J,N,N0,X2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%row/5 rules for handling even I>1. Squares corresponding
%%to even Is are tilted 45 degrees w.r.t. the axes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

row(I,J,N,N0,X):-
	I>1,
	I1 is mod(I,2),
	I1 is 0,
	series(I,Y),
	Y is J,
	I2 is N+1,
	append(X,[I2],X1),
	I3 is I-1,
	row(I3,J,N,N0,X1).
row(I,J,N,N0,X):-
	I>1,
	I1 is mod(I,2),
	I1 is 0,
	series(I,Y),
	Y>J,
	I2 is N+1-Y+J,
	append(X,[I2],X1),
	I3 is N+1+Y-J,
	append(X1,[I3],X2),
	I4 is I-1,
	row(I4,J,N,N0,X2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%setall/6 sets a range of positions in a row active. It
%%takes the same arguments as row/5 and an additional count.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

setall(0,I,J,N,N0,X):-
	I1 is N+1,
	append(X,[I1],X1),
	I2 is I-1,
	row(I2,J,N,N0,X1).
setall(C,I,J,N,N0,X):-
	C>0,
	C1 is N+1-C,
	append(X,[C1],X1),
	C2 is N+1+C,
	append(X1,[C2],X2),
	C3 is C-1,
	setall(C3,I,J,N,N0,X2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Helper predicates.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%print/2 prints a row corresponding to the contents of the
%%list passed to it by row/5.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

print(0,_):-nl.
print(I,X):-
	I>0,
	member(I,X),
	write('*'),
	I1 is I-1,
	print(I1,X).
print(I,X):-
	I>0,
	write(' '),
	I1 is I-1,
	print(I1,X).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%append/3 appends two lists passed as the first 2 arguments
%%into a another list specified by the 3rd argument. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

append([],L,L).
append([H|T],L2,[H|R]):-
	append(T,L2,R).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%member/2 determines whether an element is a member of the
%%specified list
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

member(A,[A|_]).
member(A,[_|T]):-
	member(A,T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%power/3 computes the power of a particular base.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

power(_,0,1).
power(A,N,X):-
	N>0,
	N1 is N-1,
	power(A,N1,X1),
	X is A*X1.
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%series/2 computes the dimension of the square
%%corresponding to a particular I. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
series(X,Y):- 
	X1 is mod(X,2),
	X2 is X-X1,
	X3 is round(X2/2),
	X4 is X3+1,
	power(2,X4,X5),
	Y is round(X5/2).